// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nmp_axi4l_ip_nmp_axi4l_ip,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.566000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=262,HLS_SYN_LUT=375,HLS_VERSION=2024_1}" *)

module nmp_axi4l_ip (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [7:0] awaddr;
wire   [0:0] awvalid;
wire   [0:0] awready_i;
reg   [0:0] awready_o;
reg    awready_o_ap_vld;
wire   [31:0] wdata;
wire   [0:0] wvalid;
wire   [0:0] wready_i;
reg   [0:0] wready_o;
reg    wready_o_ap_vld;
wire   [0:0] bvalid_i;
reg   [0:0] bvalid_o;
reg    bvalid_o_ap_vld;
wire   [0:0] bready;
wire   [7:0] araddr;
wire   [0:0] arvalid;
wire   [0:0] arready_i;
reg   [0:0] arready_o;
reg    arready_o_ap_vld;
reg    rdata_ap_vld;
wire   [0:0] rvalid_i;
reg   [0:0] rvalid_o;
reg    rvalid_o_ap_vld;
wire   [0:0] rready;
wire   [0:0] clk;
wire   [0:0] rst_n;
reg   [7:0] compute_idx;
reg   [0:0] ap_phi_mux_empty_phi_fu_226_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] rst_n_read_read_fu_106_p2;
wire   [0:0] arready_read_read_fu_201_p2;
wire   [0:0] arvalid_read_read_fu_118_p2;
reg   [7:0] ap_phi_mux_storemerge_phi_fu_237_p4;
wire   [7:0] add_ln112_fu_322_p2;
wire   [0:0] not_sel_tmp1_fu_250_p2;
wire   [0:0] not_sel_tmp4_fu_263_p2;
wire   [0:0] or_ln84_fu_282_p2;
wire   [0:0] and_ln86_fu_288_p2;
wire   [0:0] or_ln103_fu_306_p2;
wire   [0:0] and_ln105_fu_312_p2;
wire   [0:0] awready_load_not6_fu_244_p2;
wire   [0:0] wready_load_not7_fu_257_p2;
wire   [0:0] xor_ln84_fu_270_p2;
wire   [0:0] or_ln84_1_fu_276_p2;
wire   [0:0] and_ln103_fu_294_p2;
wire   [0:0] xor_ln103_fu_300_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_condition_93;
reg    ap_condition_98;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 compute_idx = 8'd0;
#0 ap_CS_fsm = 1'd1;
end

nmp_axi4l_ip_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .awaddr_x(awaddr),
    .awvalid_x(awvalid),
    .awready_o(awready_o),
    .awready_o_ap_vld(awready_o_ap_vld),
    .awready_i(awready_i),
    .wdata_x(wdata),
    .wvalid_x(wvalid),
    .wready_o(wready_o),
    .wready_o_ap_vld(wready_o_ap_vld),
    .wready_i(wready_i),
    .bvalid_o(bvalid_o),
    .bvalid_o_ap_vld(bvalid_o_ap_vld),
    .bvalid_i(bvalid_i),
    .bready_x(bready),
    .araddr_x(araddr),
    .arvalid_x(arvalid),
    .arready_o(arready_o),
    .arready_o_ap_vld(arready_o_ap_vld),
    .arready_i(arready_i),
    .rdata_x(rdata),
    .rdata_ap_vld(rdata_ap_vld),
    .rvalid_o(rvalid_o),
    .rvalid_o_ap_vld(rvalid_o_ap_vld),
    .rvalid_i(rvalid_i),
    .rready_x(rready),
    .clk(clk),
    .rst_n(rst_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compute_idx <= ap_phi_mux_storemerge_phi_fu_237_p4;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_98)) begin
            ap_phi_mux_empty_phi_fu_226_p4 = 1'd1;
        end else if ((1'b1 == ap_condition_93)) begin
            ap_phi_mux_empty_phi_fu_226_p4 = 1'd0;
        end else begin
            ap_phi_mux_empty_phi_fu_226_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_226_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((rst_n_read_read_fu_106_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_237_p4 = add_ln112_fu_322_p2;
        end else if ((rst_n_read_read_fu_106_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_237_p4 = 8'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_237_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_237_p4 = 'bx;
    end
end

always @ (*) begin
    if (((arvalid_read_read_fu_118_p2 == 1'd1) & (arready_read_read_fu_201_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        arready_o = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (((arvalid_read_read_fu_118_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1)) | ((arready_read_read_fu_201_p2 == 1'd1) & (rst_n_read_read_fu_106_p2 == 1'd1)))) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        arready_o = 1'd0;
    end else begin
        arready_o = 'bx;
    end
end

always @ (*) begin
    if ((((arvalid_read_read_fu_118_p2 == 1'd1) & (arready_read_read_fu_201_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state1) & (((arvalid_read_read_fu_118_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1)) | ((arready_read_read_fu_201_p2 == 1'd1) & (rst_n_read_read_fu_106_p2 == 1'd1)))) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        arready_o_ap_vld = 1'b1;
    end else begin
        arready_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((rst_n_read_read_fu_106_p2 == 1'd1)) begin
            awready_o = not_sel_tmp1_fu_250_p2;
        end else if ((rst_n_read_read_fu_106_p2 == 1'd0)) begin
            awready_o = 1'd0;
        end else begin
            awready_o = 'bx;
        end
    end else begin
        awready_o = 'bx;
    end
end

always @ (*) begin
    if ((((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        awready_o_ap_vld = 1'b1;
    end else begin
        awready_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln84_fu_282_p2 == 1'd0))) begin
        bvalid_o = 1'd1;
    end else if ((((1'd1 == and_ln86_fu_288_p2) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln84_fu_282_p2 == 1'd1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        bvalid_o = 1'd0;
    end else begin
        bvalid_o = bvalid_i;
    end
end

always @ (*) begin
    if ((((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln84_fu_282_p2 == 1'd0)) | ((1'd1 == and_ln86_fu_288_p2) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln84_fu_282_p2 == 1'd1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        bvalid_o_ap_vld = 1'b1;
    end else begin
        bvalid_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((arvalid_read_read_fu_118_p2 == 1'd1) & (arready_read_read_fu_201_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        rdata_ap_vld = 1'b1;
    end else begin
        rdata_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln103_fu_306_p2 == 1'd0))) begin
        rvalid_o = 1'd1;
    end else if ((((1'd1 == and_ln105_fu_312_p2) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln103_fu_306_p2 == 1'd1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        rvalid_o = 1'd0;
    end else begin
        rvalid_o = rvalid_i;
    end
end

always @ (*) begin
    if ((((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln103_fu_306_p2 == 1'd0)) | ((1'd1 == and_ln105_fu_312_p2) & (rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_ln103_fu_306_p2 == 1'd1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        rvalid_o_ap_vld = 1'b1;
    end else begin
        rvalid_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((rst_n_read_read_fu_106_p2 == 1'd1)) begin
            wready_o = not_sel_tmp4_fu_263_p2;
        end else if ((rst_n_read_read_fu_106_p2 == 1'd0)) begin
            wready_o = 1'd0;
        end else begin
            wready_o = 'bx;
        end
    end else begin
        wready_o = 'bx;
    end
end

always @ (*) begin
    if ((((rst_n_read_read_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((rst_n_read_read_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        wready_o_ap_vld = 1'b1;
    end else begin
        wready_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_322_p2 = (compute_idx + 8'd1);

assign and_ln103_fu_294_p2 = (arvalid & ap_phi_mux_empty_phi_fu_226_p4);

assign and_ln105_fu_312_p2 = (rvalid_i & rready);

assign and_ln86_fu_288_p2 = (bvalid_i & bready);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_93 = (((arvalid_read_read_fu_118_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1)) | ((arready_read_read_fu_201_p2 == 1'd1) & (rst_n_read_read_fu_106_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_98 = ((arvalid_read_read_fu_118_p2 == 1'd1) & (arready_read_read_fu_201_p2 == 1'd0) & (rst_n_read_read_fu_106_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arready_read_read_fu_201_p2 = arready_i;

assign arvalid_read_read_fu_118_p2 = arvalid;

assign awready_load_not6_fu_244_p2 = (awready_i ^ 1'd1);

assign not_sel_tmp1_fu_250_p2 = (awvalid & awready_load_not6_fu_244_p2);

assign not_sel_tmp4_fu_263_p2 = (wvalid & wready_load_not7_fu_257_p2);

assign or_ln103_fu_306_p2 = (xor_ln103_fu_300_p2 | rvalid_i);

assign or_ln84_1_fu_276_p2 = (xor_ln84_fu_270_p2 | wready_i);

assign or_ln84_fu_282_p2 = (or_ln84_1_fu_276_p2 | bvalid_i);

assign rst_n_read_read_fu_106_p2 = rst_n;

assign wready_load_not7_fu_257_p2 = (wready_i ^ 1'd1);

assign xor_ln103_fu_300_p2 = (1'd1 ^ and_ln103_fu_294_p2);

assign xor_ln84_fu_270_p2 = (wvalid ^ 1'd1);

endmodule //nmp_axi4l_ip
