-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nmp_axi4l_ip is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of nmp_axi4l_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nmp_axi4l_ip_nmp_axi4l_ip,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.566000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=262,HLS_SYN_LUT=375,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal awaddr : STD_LOGIC_VECTOR (7 downto 0);
    signal awvalid : STD_LOGIC_VECTOR (0 downto 0);
    signal awready_i : STD_LOGIC_VECTOR (0 downto 0);
    signal awready_o : STD_LOGIC_VECTOR (0 downto 0);
    signal awready_o_ap_vld : STD_LOGIC;
    signal wdata : STD_LOGIC_VECTOR (31 downto 0);
    signal wvalid : STD_LOGIC_VECTOR (0 downto 0);
    signal wready_i : STD_LOGIC_VECTOR (0 downto 0);
    signal wready_o : STD_LOGIC_VECTOR (0 downto 0);
    signal wready_o_ap_vld : STD_LOGIC;
    signal bvalid_i : STD_LOGIC_VECTOR (0 downto 0);
    signal bvalid_o : STD_LOGIC_VECTOR (0 downto 0);
    signal bvalid_o_ap_vld : STD_LOGIC;
    signal bready : STD_LOGIC_VECTOR (0 downto 0);
    signal araddr : STD_LOGIC_VECTOR (7 downto 0);
    signal arvalid : STD_LOGIC_VECTOR (0 downto 0);
    signal arready_i : STD_LOGIC_VECTOR (0 downto 0);
    signal arready_o : STD_LOGIC_VECTOR (0 downto 0);
    signal arready_o_ap_vld : STD_LOGIC;
    signal rdata_ap_vld : STD_LOGIC;
    signal rvalid_i : STD_LOGIC_VECTOR (0 downto 0);
    signal rvalid_o : STD_LOGIC_VECTOR (0 downto 0);
    signal rvalid_o_ap_vld : STD_LOGIC;
    signal rready : STD_LOGIC_VECTOR (0 downto 0);
    signal clk : STD_LOGIC_VECTOR (0 downto 0);
    signal rst_n : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_idx : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_phi_mux_empty_phi_fu_226_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rst_n_read_read_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arready_read_read_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arvalid_read_read_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln112_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal not_sel_tmp1_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp4_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal awready_load_not6_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wready_load_not7_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln84_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln103_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_93 : BOOLEAN;
    signal ap_condition_98 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nmp_axi4l_ip_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        awaddr_x : OUT STD_LOGIC_VECTOR (7 downto 0);
        awvalid_x : OUT STD_LOGIC_VECTOR (0 downto 0);
        awready_o : IN STD_LOGIC_VECTOR (0 downto 0);
        awready_o_ap_vld : IN STD_LOGIC;
        awready_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        wdata_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        wvalid_x : OUT STD_LOGIC_VECTOR (0 downto 0);
        wready_o : IN STD_LOGIC_VECTOR (0 downto 0);
        wready_o_ap_vld : IN STD_LOGIC;
        wready_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        bvalid_o : IN STD_LOGIC_VECTOR (0 downto 0);
        bvalid_o_ap_vld : IN STD_LOGIC;
        bvalid_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        bready_x : OUT STD_LOGIC_VECTOR (0 downto 0);
        araddr_x : OUT STD_LOGIC_VECTOR (7 downto 0);
        arvalid_x : OUT STD_LOGIC_VECTOR (0 downto 0);
        arready_o : IN STD_LOGIC_VECTOR (0 downto 0);
        arready_o_ap_vld : IN STD_LOGIC;
        arready_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        rdata_x : IN STD_LOGIC_VECTOR (31 downto 0);
        rdata_ap_vld : IN STD_LOGIC;
        rvalid_o : IN STD_LOGIC_VECTOR (0 downto 0);
        rvalid_o_ap_vld : IN STD_LOGIC;
        rvalid_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        rready_x : OUT STD_LOGIC_VECTOR (0 downto 0);
        clk : OUT STD_LOGIC_VECTOR (0 downto 0);
        rst_n : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component nmp_axi4l_ip_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        awaddr_x => awaddr,
        awvalid_x => awvalid,
        awready_o => awready_o,
        awready_o_ap_vld => awready_o_ap_vld,
        awready_i => awready_i,
        wdata_x => wdata,
        wvalid_x => wvalid,
        wready_o => wready_o,
        wready_o_ap_vld => wready_o_ap_vld,
        wready_i => wready_i,
        bvalid_o => bvalid_o,
        bvalid_o_ap_vld => bvalid_o_ap_vld,
        bvalid_i => bvalid_i,
        bready_x => bready,
        araddr_x => araddr,
        arvalid_x => arvalid,
        arready_o => arready_o,
        arready_o_ap_vld => arready_o_ap_vld,
        arready_i => arready_i,
        rdata_x => ap_const_lv32_0,
        rdata_ap_vld => rdata_ap_vld,
        rvalid_o => rvalid_o,
        rvalid_o_ap_vld => rvalid_o_ap_vld,
        rvalid_i => rvalid_i,
        rready_x => rready,
        clk => clk,
        rst_n => rst_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                compute_idx <= ap_phi_mux_storemerge_phi_fu_237_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln112_fu_322_p2 <= std_logic_vector(unsigned(compute_idx) + unsigned(ap_const_lv8_1));
    and_ln103_fu_294_p2 <= (arvalid and ap_phi_mux_empty_phi_fu_226_p4);
    and_ln105_fu_312_p2 <= (rvalid_i and rready);
    and_ln86_fu_288_p2 <= (bvalid_i and bready);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_condition_93_assign_proc : process(rst_n_read_read_fu_106_p2, arready_read_read_fu_201_p2, arvalid_read_read_fu_118_p2)
    begin
                ap_condition_93 <= (((arvalid_read_read_fu_118_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) or ((arready_read_read_fu_201_p2 = ap_const_lv1_1) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_98_assign_proc : process(rst_n_read_read_fu_106_p2, arready_read_read_fu_201_p2, arvalid_read_read_fu_118_p2)
    begin
                ap_condition_98 <= ((arvalid_read_read_fu_118_p2 = ap_const_lv1_1) and (arready_read_read_fu_201_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1));
    end process;


    ap_phi_mux_empty_phi_fu_226_p4_assign_proc : process(ap_CS_fsm_state1, ap_condition_93, ap_condition_98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_98)) then 
                ap_phi_mux_empty_phi_fu_226_p4 <= ap_const_lv1_1;
            elsif ((ap_const_boolean_1 = ap_condition_93)) then 
                ap_phi_mux_empty_phi_fu_226_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_empty_phi_fu_226_p4 <= "X";
            end if;
        else 
            ap_phi_mux_empty_phi_fu_226_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_237_p4_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, add_ln112_fu_322_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_phi_fu_237_p4 <= add_ln112_fu_322_p2;
            elsif ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_phi_fu_237_p4 <= ap_const_lv8_0;
            else 
                ap_phi_mux_storemerge_phi_fu_237_p4 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_237_p4 <= "XXXXXXXX";
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    arready_o_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, arready_read_read_fu_201_p2, arvalid_read_read_fu_118_p2)
    begin
        if (((arvalid_read_read_fu_118_p2 = ap_const_lv1_1) and (arready_read_read_fu_201_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            arready_o <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (((arvalid_read_read_fu_118_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) or ((arready_read_read_fu_201_p2 = ap_const_lv1_1) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)))) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            arready_o <= ap_const_lv1_0;
        else 
            arready_o <= "X";
        end if; 
    end process;


    arready_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, arready_read_read_fu_201_p2, arvalid_read_read_fu_118_p2)
    begin
        if ((((arvalid_read_read_fu_118_p2 = ap_const_lv1_1) and (arready_read_read_fu_201_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (((arvalid_read_read_fu_118_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) or ((arready_read_read_fu_201_p2 = ap_const_lv1_1) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1)))) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            arready_o_ap_vld <= ap_const_logic_1;
        else 
            arready_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arready_read_read_fu_201_p2 <= arready_i;
    arvalid_read_read_fu_118_p2 <= arvalid;
    awready_load_not6_fu_244_p2 <= (awready_i xor ap_const_lv1_1);

    awready_o_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, not_sel_tmp1_fu_250_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) then 
                awready_o <= not_sel_tmp1_fu_250_p2;
            elsif ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0)) then 
                awready_o <= ap_const_lv1_0;
            else 
                awready_o <= "X";
            end if;
        else 
            awready_o <= "X";
        end if; 
    end process;


    awready_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2)
    begin
        if ((((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            awready_o_ap_vld <= ap_const_logic_1;
        else 
            awready_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    bvalid_o_assign_proc : process(bvalid_i, ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, or_ln84_fu_282_p2, and_ln86_fu_288_p2)
    begin
        if (((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln84_fu_282_p2 = ap_const_lv1_0))) then 
            bvalid_o <= ap_const_lv1_1;
        elsif ((((ap_const_lv1_1 = and_ln86_fu_288_p2) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln84_fu_282_p2 = ap_const_lv1_1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bvalid_o <= ap_const_lv1_0;
        else 
            bvalid_o <= bvalid_i;
        end if; 
    end process;


    bvalid_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, or_ln84_fu_282_p2, and_ln86_fu_288_p2)
    begin
        if ((((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln84_fu_282_p2 = ap_const_lv1_0)) or ((ap_const_lv1_1 = and_ln86_fu_288_p2) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln84_fu_282_p2 = ap_const_lv1_1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bvalid_o_ap_vld <= ap_const_logic_1;
        else 
            bvalid_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    not_sel_tmp1_fu_250_p2 <= (awvalid and awready_load_not6_fu_244_p2);
    not_sel_tmp4_fu_263_p2 <= (wvalid and wready_load_not7_fu_257_p2);
    or_ln103_fu_306_p2 <= (xor_ln103_fu_300_p2 or rvalid_i);
    or_ln84_1_fu_276_p2 <= (xor_ln84_fu_270_p2 or wready_i);
    or_ln84_fu_282_p2 <= (or_ln84_1_fu_276_p2 or bvalid_i);

    rdata_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, arready_read_read_fu_201_p2, arvalid_read_read_fu_118_p2)
    begin
        if (((arvalid_read_read_fu_118_p2 = ap_const_lv1_1) and (arready_read_read_fu_201_p2 = ap_const_lv1_0) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rdata_ap_vld <= ap_const_logic_1;
        else 
            rdata_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rst_n_read_read_fu_106_p2 <= rst_n;

    rvalid_o_assign_proc : process(rvalid_i, ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, or_ln103_fu_306_p2, and_ln105_fu_312_p2)
    begin
        if (((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln103_fu_306_p2 = ap_const_lv1_0))) then 
            rvalid_o <= ap_const_lv1_1;
        elsif ((((ap_const_lv1_1 = and_ln105_fu_312_p2) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln103_fu_306_p2 = ap_const_lv1_1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rvalid_o <= ap_const_lv1_0;
        else 
            rvalid_o <= rvalid_i;
        end if; 
    end process;


    rvalid_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, or_ln103_fu_306_p2, and_ln105_fu_312_p2)
    begin
        if ((((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln103_fu_306_p2 = ap_const_lv1_0)) or ((ap_const_lv1_1 = and_ln105_fu_312_p2) and (rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln103_fu_306_p2 = ap_const_lv1_1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rvalid_o_ap_vld <= ap_const_logic_1;
        else 
            rvalid_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    wready_load_not7_fu_257_p2 <= (wready_i xor ap_const_lv1_1);

    wready_o_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2, not_sel_tmp4_fu_263_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((rst_n_read_read_fu_106_p2 = ap_const_lv1_1)) then 
                wready_o <= not_sel_tmp4_fu_263_p2;
            elsif ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0)) then 
                wready_o <= ap_const_lv1_0;
            else 
                wready_o <= "X";
            end if;
        else 
            wready_o <= "X";
        end if; 
    end process;


    wready_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, rst_n_read_read_fu_106_p2)
    begin
        if ((((rst_n_read_read_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((rst_n_read_read_fu_106_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            wready_o_ap_vld <= ap_const_logic_1;
        else 
            wready_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln103_fu_300_p2 <= (ap_const_lv1_1 xor and_ln103_fu_294_p2);
    xor_ln84_fu_270_p2 <= (wvalid xor ap_const_lv1_1);
end behav;
